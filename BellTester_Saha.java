import java.util.ArrayList;public class BellTester_Saha{  private static ArrayList<Bell> bellAr = new ArrayList<Bell>();  public static void main( String[] args)   {            //creates arrayList values      for ( int i = 0; i<=8; i++)      {         double id = Math.random()*400;                   int idInt = (int)(id += 216000);         Bell x = new Bell(idInt);         bellAr.set(i, x);      }      System.out.println(bellAr);      main.swapEnds(bellAr);                                 }     //part a       public static ArrayList<Bell> swapEnds(ArrayList<Bell> arrayA)       {            int length = arrayA.size();            Bell first = arrayA.get(0);            arrayA.set(0, arrayA.get(length-1));            arrayA.set((length-1), first);            return arrayA;                    }                 //part b       public static ArrayList<Bell> shiftR(ArrayList<Bell> arrayB)       {                     for ( int i = 1; i < arrayB.size()-1; i++)            {                           Bell temp = arrayB.get(i);               arrayB.set(i, arrayB.get(i-1));                        }            arrayB.set(0, arrayB.get(arrayB.size()-1 ));            return arrayB;       }            //part c       public static ArrayList<Bell> replaceEven(ArrayList<Bell> arrayC)       {            int length = arrayC.size();            Bell bellVal = new Bell(216222);            for ( int i = 1; i < length-1; i++)            {               System.out.println(arrayC);               if (arrayC.get(i).id() %2 != 0)               {                  arrayC.set(i, bellVal);                        }                     }            return arrayC;        }                //part d        public static ArrayList<Bell> replaceWLarger(ArrayList<Bell> arrayD)        {                    for( int i = 0; i< arrayD.size(); i++)            {                           if (arrayD.get(i).compareTo(arrayD.get(i+1)) >= 0 )               {                  arrayD.set(i, arrayD.get(i));                  if (arrayD.get(i).compareTo(arrayD.get(i-1)) < 0)                  {                     arrayD.set(i, arrayD.get(i-1));                  }                                 } else if ( arrayD.get(i).compareTo(arrayD.get(i+1)) < 0 )               {                  arrayD.set(i, arrayD.get(i+1));                  if (arrayD.get(i).compareTo(arrayD.get(i-1)) < 0)                  {                     arrayD.set(i, arrayD.get(i-1));                  }                }             }             return arrayD;         }                  //part e         public static ArrayList<Bell> removeMiddle(ArrayList<Bell> arrayE)         {            if (arrayE.size() % 2 == 0)            {               arrayE.remove((arrayE.size()/2)-1);               arrayE.remove(arrayE.size()/2);            }            arrayE.remove(arrayE.size()/2);                        return arrayE;                  }                  //part f         public static ArrayList<Bell> firstEven(ArrayList<Bell> arrayF)         {            for ( int i = 0; i < arrayF.size(); i++)            {               if (arrayF.get(i).id() % 2 == 0)               {                  arrayF.set(0, arrayF.get(i));                        }            }            return arrayF;                     }         public static int find2ndMax( ArrayList<Integer> ints )         {            int max;            int max2nd, oldMax;            max = ints.get(0);            max2nd = ints.get(1);            for (int i=1; i< ints.size(); i++) {               if(ints.get(i) > max) {                  oldMax = max;                  max = ints.get(i);                  if (oldMax > max2nd) {                     max2nd = oldMax;                  }                 } else if (ints.get(i) > max2nd) {                  max2nd = ints.get(i);               }                       }            return max2nd;           }         //part j         public static boolean findDuplicate(ArrayList<Bell> arrayJ)         {            for( int i = 0; i< arrayJ.size(); i++)            {               if ( arrayJ.get(i).id() == arrayJ.get(i+1).id())               {                  return true;               }                        }             return false;         }                          }class Bell {  private int studentId;  //constructor   public Bell( int id )  {     studentId = id;  }  // getter for student id  public int id()  {     return studentId;  }   //comparator   public int compareTo( Bell otherBell )  {     return this.id() - otherBell.id();  }      public String toString()   {     return "" + studentId;  }     } 